var N=null,E="",T="t",U="u",searchIndex={};
var R=["graphtest","result","try_from","try_into","borrow","borrow_mut","type_id","typeid","children","SuperIndex","SimpleGraph"];

searchIndex["graphtest"]={"doc":"an examplatory graph module with minimal functionality","i":[[3,"Node",R[0],"a node for any data with adjacency information",N,N],[3,"VGraph",E,"a graph that stores its nodes as a [`Vec`]",N,N],[0,"ops",E,"a module for iterating over the indices of collections…",N,N],[8,R[9],"graphtest::ops","trait for implementing over the indices of collections…",N,N],[16,"IndexIter",E,E,0,N],[16,"ItemIter",E,E,0,N],[10,"enumerate",E,"enumerates over the indices and items of a collection",0,[[["self"]],["zip"]]],[8,R[10],R[0],"A simple graph implementation for any collection that…",N,N],[16,"C",E,E,1,N],[10,"nodes",E,"gets a reference to the node container",1,[[["self"]]]],[10,R[8],E,"gets the indices of the children of a node with index…",1,[[["i"],["self"]],["vec"]]],[11,"ancestors",E,"gets all ancestors of a node",1,[[["i"],["self"]],["vec"]]],[11,"get_topological_order",E,"get topologically sorted vector of indices for a graph",1,[[["self"]],[["vec"],["str"],[R[1],["vec","str"]]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[2],E,E,2,[[[U]],[R[1]]]],[11,R[3],E,E,2,[[],[R[1]]]],[11,R[4],E,E,2,[[["self"]],[T]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[R[7]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[2],E,E,3,[[[U]],[R[1]]]],[11,R[3],E,E,3,[[],[R[1]]]],[11,R[4],E,E,3,[[["self"]],[T]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[R[7]]]],[11,"nodes",E,E,3,[[["self"]]]],[11,R[8],E,E,3,[[["self"],["usize"]],[["vec",["usize"]],["usize"]]]]],"p":[[8,R[9]],[8,R[10]],[3,"Node"],[3,"VGraph"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);